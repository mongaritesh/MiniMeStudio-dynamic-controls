using MiniMeStudio.Services;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data;
using System.Web;
using System.Linq;
using System.Collections.ObjectModel;
using System.IO;
using System.Runtime.Serialization.Json;
using MiniMeStudio.Models;
using MahApps.Metro.Controls.Dialogs;
using Microsoft.Win32;
using Microsoft.VisualBasic;

namespace MiniMeStudio.Views
{
    /// <summary>
    /// Interaction logic for UsersPage.xaml
    /// </summaryList<UserMaster>
    public partial class UsersPage : Page
    {
        int MyGroupId;
        DataTable dtMultiple = new DataTable();

        public UsersPage()
        {
            InitializeComponent();
            GetUserDetails();
        }

        public class UserMaster
        {
            public string FName { get; set; }
            public string LName { get; set; }
            public string Name { get; set; }
            public string IsAdmin { get; set; }
            public string Email { get; set; }
            public string Location { get; set; }
            public string UserGroupName { get; set; }
            public int UserID { get; set; }
            public int AutoGenerated { get; set; }

        }

        public class GroupMaster
        {
            public string UserGroupID { get; set; }
            public string UserGroupName { get; set; }
            public string UserGroupDescription { get; set; }
            public string Members { get; set; }
            public string Minis { get; set; }

        }

        private void MenuItem_Click_New_User(object sender, RoutedEventArgs e)
        {
            pop_Save_NewUser.Content = "SAVE";
            // Fill Like e-Mail Address
            var result = Utility.ExecuteSP("User_SelectAll", "\"1234\"");
            result = result.Substring(14, result.Length - 16).TrimEnd();

            cmbLikeUserName.ItemsSource = JsonConvert.DeserializeObject<DataTable>((result)).DefaultView;


            // Fill Group Name            
            var grresult = Utility.ExecuteSP("UserGroup_SelectAll", "\"1234\"");
            grresult = grresult.Substring(14, grresult.Length - 16).TrimEnd();

            GrList.ItemsSource = JsonConvert.DeserializeObject<DataTable>((grresult)).DefaultView;

            popupNewUserAdd.Visibility = System.Windows.Visibility.Visible;
            popupNewUserAdd.IsOpen = true;
            popupNewUserAdd.Effect = null;
            txtEMailId.IsEnabled = true;
            lblPopupStatus.Content = "New User";

            // GrdPage.Opacity = 0.29;
        }

        public class ListBoxData
        {
            public string UserGroupID { get; set; }
            public string UserGroupName { get; set; }
        }

        private void cmbLikeUserName_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                GrList.SelectedItems.Clear();

                if (cmbLikeUserName.SelectedIndex >= 0)
                {

                    string LikeMailId = "", AccountId = "1234";
                    LikeMailId = cmbLikeUserName.SelectedValue.ToString();

                    if (LikeMailId == "")
                        return;
                    //Retrive UserID from e-Mail Id                    
                    var result = Utility.ExecuteSP("UserGroupLink_SelectOneUser", "\"'" + LikeMailId + "'," + AccountId + "\"");
                    result = result.Substring(14, result.Length - 16).TrimEnd();

                    var myobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(result);

                    List<GroupMaster> myUsers = (myobj).Select(x => new GroupMaster
                    {
                        UserGroupID = (string)x["UserGroupID"].ToString()

                    }).ToList();

                    string UserGroupID = "";

                    for (int i = 0; i < myUsers.Count; i++)
                    {
                        UserGroupID = myUsers[i].UserGroupID.ToString();
                        String strItem;
                        foreach (DataRowView selecteditem in GrList.Items)
                        {
                            strItem = selecteditem.Row["UserGroupID"].ToString();
                            if (UserGroupID == strItem)
                            {
                                GrList.SelectedItems.Add(selecteditem);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error " + ex.Message.ToString());
            }
        }

        private void btnEditLine_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Button button = sender as Button;

                string MyMailId = ((MiniMeStudio.Views.UsersPage.UserMaster)((System.Windows.FrameworkElement)sender).DataContext).Email.ToString();
                string AccountId = "1234";
                MyMailId = MyMailId.Trim().ToString();

                var EditUser_Result = Utility.ExecuteSP("User_SelectOne", "\"'" + MyMailId + "'," + AccountId + "\"");
                EditUser_Result = EditUser_Result.Substring(14, EditUser_Result.Length - 16).TrimEnd();
                var myobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(EditUser_Result);

                List<UserMaster> crmyUsers = (myobj).Select(x => new UserMaster
                {
                    FName = (string)x["FirstName"]
                    ,
                    LName = (string)x["LastName"]
                    ,
                    Email = "   " + (string)x["EmailAddress"]
                    ,
                    IsAdmin = (string)x["IsAdmin"]
                    ,
                    UserID = (int)x["UserID"]
                    ,
                    AutoGenerated = (int)x["AutoGenerated"]

                }).ToList();


                txtEMailId.Text = MyMailId;
                txtFirstName.Text = crmyUsers[0].FName.ToString();
                txtLastName.Text = crmyUsers[0].LName.ToString();

                if (crmyUsers[0].IsAdmin.ToString() == "1")
                    chkAdmin.IsChecked = true;
                else
                    chkAdmin.IsChecked = false;

                // Fill Like e-Mail Address
                var result = Utility.ExecuteSP("User_SelectAll", "\"1234\"");
                result = result.Substring(14, result.Length - 16).TrimEnd();
                cmbLikeUserName.ItemsSource = JsonConvert.DeserializeObject<DataTable>((result)).DefaultView;
                cmbLikeUserName.SelectedIndex = 0;

                // Fill Group Name            
                var grresult = Utility.ExecuteSP("UserGroup_SelectAll", "\"1234\"");
                grresult = grresult.Substring(14, grresult.Length - 16).TrimEnd();
                GrList.ItemsSource = JsonConvert.DeserializeObject<DataTable>((grresult)).DefaultView;

                cmbLikeUserName.SelectedIndex = -1;

                //Retrive UserID from e-Mail Id
                AccountId = "1234";
                result = Utility.ExecuteSP("UserGroupLink_SelectOneUser", "\"'" + crmyUsers[0].UserID.ToString() + "'," + AccountId + "\"");
                result = result.Substring(14, result.Length - 16).TrimEnd();

                var grmyobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(result);

                List<GroupMaster> myUsers = (grmyobj).Select(x => new GroupMaster
                {
                    UserGroupID = (string)x["UserGroupID"].ToString()

                }).ToList();

                string UserGroupID = "";
                for (int i = 0; i < myUsers.Count; i++)
                {
                    UserGroupID = myUsers[i].UserGroupID.ToString();
                    String strItem;
                    foreach (DataRowView selecteditem in GrList.Items)
                    {
                        strItem = selecteditem.Row["UserGroupID"].ToString();
                        if (UserGroupID == strItem)
                        {
                            GrList.SelectedItems.Add(selecteditem);
                        }
                    }
                }


                // Show Popup Window
                popupNewUserAdd.Visibility = System.Windows.Visibility.Visible;
                popupNewUserAdd.IsOpen = true;
                popupNewUserAdd.Effect = null;

                pop_Save_NewUser.Content = "UPDATE";
                txtEMailId.IsEnabled = false;
                lblPopupStatus.Content = "Edit User";

                //   GrdPage.Opacity = 0.29;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString());
            }
        }

        private void BtnGroup_Click(object sender, RoutedEventArgs e)
        {
            txtSearch_User.Text = "";
            stGroup.Visibility = Visibility.Visible;
            stUser.Visibility = Visibility.Hidden;
            //lvUsers.Visibility = Visibility.Hidden;
            dgUserList.Visibility = Visibility.Hidden;
            Users.Visibility = Visibility.Hidden;
            GetGroupDetails();

            TextDecorationCollection myCollection = new TextDecorationCollection();
            TextDecoration myUnderLine = new TextDecoration();
            myUnderLine.Location = TextDecorationLocation.Underline;

            // Set the solid color brush.
            myUnderLine.Pen = new Pen(Brushes.OrangeRed, 1);
            myUnderLine.PenThicknessUnit = TextDecorationUnit.FontRecommended;

            // Set the underline decoration to the text block.
            myCollection.Add(myUnderLine);
            tbGroups.TextDecorations = myCollection;

            tbUsers.TextDecorations = null;
            cmbFilter_User.Visibility = Visibility.Hidden;
        }

        private void BtnUsers_Click(object sender, RoutedEventArgs e)
        {
            txtSearch_User.Text = "";
            stGroup.Visibility = Visibility.Hidden;
            stUser.Visibility = Visibility.Visible;
            //lvGroup.Visibility = Visibility.Hidden;
            dgGroupList.Visibility = Visibility.Hidden;
            Group.Visibility = Visibility.Hidden;
            GetUserDetails();

            TextDecorationCollection myCollection = new TextDecorationCollection();
            TextDecoration myUnderLine = new TextDecoration();

            myUnderLine.Location = TextDecorationLocation.Underline;

            // Set the solid color brush.
            myUnderLine.Pen = new Pen(Brushes.OrangeRed, 1);
            myUnderLine.PenThicknessUnit = TextDecorationUnit.FontRecommended;

            // Set the underline decoration to the text block.
            myCollection.Add(myUnderLine);
            tbUsers.TextDecorations = myCollection;

            tbGroups.TextDecorations = null;
            cmbFilter_User.Visibility = Visibility.Visible;
        }

        private void GetUserDetails()
        {
            try
            {
                if (dgUserList == null)
                    return;
                var result = Utility.ExecuteSP("User_SelectAllWithGroup", "\"1234\"");
                result = result.Substring(14, result.Length - 16).TrimEnd();
                var obj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(result);

                List<UserMaster> myUsers = (obj).Select(x => new UserMaster
                {
                    Name = (string)x["FirstName"] + " " + (string)x["LastName"]
                    ,
                    Email = (string)x["EmailAddress"]
                    ,
                    UserGroupName = ((string)x["UserGroupName"].ToString()).Replace("|", "      ")
                    ,
                    IsAdmin = ((string)x["IsAdmin"].ToString() == "0" ? "" : "  ADMIN  ")
                    ,
                    UserID = (int)x["UserID"]
                    ,
                    FName = (string)x["FirstName"]
                    ,
                    LName = (string)x["LastName"]
                    ,
                    AutoGenerated = (int)x["AutoGenerated"]

                }).ToList();

                List<UserMaster> myFilteredUser = new List<UserMaster>();
                if (cmbFilter_User.SelectedIndex > 0)
                {
                    if (cmbFilter_User.SelectedIndex.ToString() == "2")  // Admin
                    {
                        foreach (var LineItem in from LineItems in myUsers
                                                 where LineItems.IsAdmin.Trim() == "ADMIN"
                                                 select new { LineItems.Name, LineItems.Email, LineItems.UserGroupName, LineItems.IsAdmin, LineItems.UserID, LineItems.FName, LineItems.LName, LineItems.AutoGenerated })
                        {
                            //Console.WriteLine($"{car.Name} {car.Price}");
                            UserMaster item = new UserMaster();
                            item.Name = LineItem.FName + " " + LineItem.LName;
                            item.FName = LineItem.FName;
                            item.LName = LineItem.LName;
                            item.IsAdmin = LineItem.IsAdmin;
                            item.Email = LineItem.Email;
                            item.UserGroupName = LineItem.UserGroupName;
                            item.UserID = LineItem.UserID;
                            item.AutoGenerated = LineItem.AutoGenerated;

                            myFilteredUser.Add(item);
                        }
                    }
                    else if (cmbFilter_User.SelectedIndex.ToString() == "1")  // Users
                    {
                        foreach (var LineItem in from LineItems in myUsers
                                                 where LineItems.IsAdmin.Trim() != "ADMIN"
                                                 select new { LineItems.Name, LineItems.Email, LineItems.UserGroupName, LineItems.IsAdmin, LineItems.UserID, LineItems.FName, LineItems.LName, LineItems.AutoGenerated })
                        {
                            //Console.WriteLine($"{car.Name} {car.Price}");
                            UserMaster item = new UserMaster();
                            item.Name = LineItem.FName + " " + LineItem.LName;
                            item.FName = LineItem.FName;
                            item.LName = LineItem.LName;
                            item.IsAdmin = LineItem.IsAdmin;
                            item.Email = LineItem.Email;
                            item.UserGroupName = LineItem.UserGroupName;
                            item.UserID = LineItem.UserID;
                            item.AutoGenerated = LineItem.AutoGenerated;

                            myFilteredUser.Add(item);
                        }
                    }
                    else if (cmbFilter_User.SelectedIndex.ToString() == "3")  // Autogenerated Users
                    {
                        foreach (var LineItem in from LineItems in myUsers
                                                 where LineItems.AutoGenerated.ToString().Trim() == "1"
                                                 select new { LineItems.Name, LineItems.Email, LineItems.UserGroupName, LineItems.IsAdmin, LineItems.UserID, LineItems.FName, LineItems.LName, LineItems.AutoGenerated })
                        {
                            //Console.WriteLine($"{car.Name} {car.Price}");
                            UserMaster item = new UserMaster();
                            item.Name = LineItem.FName + " " + LineItem.LName;
                            item.FName = LineItem.FName;
                            item.LName = LineItem.LName;
                            item.IsAdmin = LineItem.IsAdmin;
                            item.Email = LineItem.Email;
                            item.UserGroupName = LineItem.UserGroupName;
                            item.UserID = LineItem.UserID;
                            item.AutoGenerated = LineItem.AutoGenerated;

                            myFilteredUser.Add(item);
                        }
                    }

                    myUsers = myFilteredUser;
                }

                // Search Option
                if (txtSearch_User != null)
                {
                    string MySearch = txtSearch_User.Text.Trim();
                    myFilteredUser = new List<UserMaster>();
                    if (txtSearch_User.Text.Trim().Length > 0)
                    {
                        foreach (var LineItem in from LineItem in myUsers
                                                 where
                                                 (
                                                 LineItem.FName.Trim().ToUpper().Contains(MySearch.ToUpper()) || LineItem.LName.Trim().ToUpper().Contains(MySearch.ToUpper()) ||
                                                 LineItem.Email.Trim().ToUpper().Contains(MySearch.ToUpper()) || LineItem.UserGroupName.Trim().ToUpper().Contains(MySearch.ToUpper())
                                                 )
                                                 select new { LineItem.Name, LineItem.Email, LineItem.UserGroupName, LineItem.IsAdmin, LineItem.UserID, LineItem.FName, LineItem.LName, LineItem.AutoGenerated })
                        {
                            UserMaster item = new UserMaster();
                            item.Name = LineItem.FName + " " + LineItem.LName;
                            item.FName = LineItem.FName;
                            item.LName = LineItem.LName;
                            item.IsAdmin = LineItem.IsAdmin;
                            item.Email = LineItem.Email;
                            item.UserGroupName = LineItem.UserGroupName;
                            item.UserID = LineItem.UserID;
                            item.AutoGenerated = LineItem.AutoGenerated;

                            myFilteredUser.Add(item);
                        }
                        myUsers = myFilteredUser;
                    }
                }
                dgUserList.ItemsSource = myUsers;
                dgUserList.Visibility = Visibility.Visible;

                Users.Visibility = Visibility.Visible;
                Group.Visibility = Visibility.Hidden;

                scrUser.Visibility = Visibility.Visible;
                scrGroup.Visibility = Visibility.Hidden;

                TextDecorationCollection myCollection = new TextDecorationCollection();
                TextDecoration myUnderLine = new TextDecoration();
                myUnderLine.Location = TextDecorationLocation.Underline;

                // Set the solid color brush.
                myUnderLine.Pen = new Pen(Brushes.OrangeRed, 1);
                myUnderLine.PenThicknessUnit = TextDecorationUnit.FontRecommended;

                // Set the underline decoration to the text block.
                myCollection.Add(myUnderLine);
                tbUsers.TextDecorations = myCollection;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString());
            }
        }

        private void GetGroupDetails()
        {
            var result = Utility.ExecuteSP("UserGroup_SelectAll", "\"1234\"");
            result = result.Substring(14, result.Length - 16).TrimEnd();
            var obj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(result);

            List<GroupMaster> myGroup = (obj).Select(x => new GroupMaster
            {
                UserGroupID = "   " + (string)x["UserGroupID"]
                ,
                UserGroupName = "    " + (string)x["UserGroupName"]
                ,
                UserGroupDescription = (string)x["UserGroupDescription"]
                ,
                Members = "0"
                ,
                Minis = "0"

            }).ToList();

            // Search Option
            string MySearch = txtSearch_User.Text.Trim();
            List<GroupMaster> myFilteredGroup = new List<GroupMaster>();
            if (txtSearch_User.Text.Trim().Length > 0)
            {
                foreach (var LineItem in from LineItem in myGroup
                                         where
                                         (
                                         LineItem.UserGroupName.Trim().ToUpper().Contains(MySearch.ToUpper()) || LineItem.UserGroupDescription.Trim().ToUpper().Contains(MySearch.ToUpper()) 
                                         
                                         )
                                         select new { LineItem.UserGroupID, LineItem.UserGroupName, LineItem.UserGroupDescription, LineItem.Members, LineItem.Minis})
                {
                    //Console.WriteLine($"{car.Name} {car.Price}");
                    GroupMaster item = new GroupMaster();
                    item.UserGroupID = LineItem.UserGroupID;
                    item.UserGroupName = LineItem.UserGroupName;
                    item.UserGroupDescription= LineItem.UserGroupDescription;
                    item.Minis= LineItem.Minis;
                    item.Members = LineItem.Members;

                    myFilteredGroup.Add(item);
                }
                myGroup = myFilteredGroup;
            }
            
            //lvGroup.ItemsSource = myGroup;
            //lvGroup.Visibility = Visibility.Visible;
            dgGroupList.ItemsSource = myGroup;
            dgGroupList.Visibility = Visibility.Visible;
            Group.Visibility = Visibility.Visible;
            Users.Visibility = Visibility.Hidden;
            scrGroup.Visibility = Visibility.Visible;
            scrUser.Visibility = Visibility.Hidden;
        }

        private void btnEditLineGr_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;

            string UserGroupID = ((MiniMeStudio.Views.UsersPage.GroupMaster)((System.Windows.FrameworkElement)sender).DataContext).UserGroupID.ToString();
            string AccountId = "1234";
            UserGroupID = UserGroupID.Trim().ToString();

            var EditUser_Result = Utility.ExecuteSP("UserGroup_SelectOne", "\"'" + UserGroupID + "'," + AccountId + "\"");
            EditUser_Result = EditUser_Result.Substring(14, EditUser_Result.Length - 16).TrimEnd();
            var myobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(EditUser_Result);

            List<GroupMaster> crmyUsers = (myobj).Select(x => new GroupMaster
            {
                UserGroupName = (string)x["UserGroupName"]
                ,
                UserGroupDescription = (string)x["UserGroupDescription"]
                ,
                UserGroupID = "   " + (string)x["UserGroupID"]

            }).ToList();


            txtDescription.Text = crmyUsers[0].UserGroupDescription.ToString();
            txtGroupName.Text = crmyUsers[0].UserGroupName.ToString();
            MyGroupId = int.Parse(crmyUsers[0].UserGroupID.ToString());

            // Show Popup Window
            popupNewGroupAdd.Visibility = System.Windows.Visibility.Visible;
            popupNewGroupAdd.IsOpen = true;
            popupNewGroupAdd.Effect = null;

            pop_Save_NewGroup.Content = "UPDATE";

            lblPopupStatusGroup.Content = "Edit Group";
            GetUserEmailByGroup(MyGroupId.ToString(), AccountId);

            // GrdPage.Opacity = 0.5;
        }

        private void GetUserEmailByGroup(string GroupID, string AccountId)
        {
            var result = Utility.ExecuteSP("UserGroupLink_SelectOneUserGroup", "\"" + GroupID + "," + AccountId + "\"");
            result = result.Substring(14, result.Length - 16).TrimEnd();
            var myobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(result);

            List<UserMaster> crmyUsers = (myobj).Select(x => new UserMaster
            {
                Name = (string)x["FirstName"] + " " + (string)x["LastName"]
                ,
                Email = "   " + (string)x["EmailAddress"]
               ,
                UserID = (int)x["UserID"]
                ,
                FName = (string)x["FirstName"]
                ,
                LName = (string)x["LastName"]

            }).ToList();

            dtMultiple = new DataTable();

            if (dtMultiple.Rows.Count > 0)
            {
            }
            else
            {
                if (dtMultiple.Columns.Count <= 0)
                {
                    dtMultiple.Columns.Add("FName");
                    dtMultiple.Columns.Add("LName");
                    dtMultiple.Columns.Add("Email");
                    dtMultiple.Columns.Add("Name");
                    dtMultiple.Columns.Add("UserID");

                }
            }

            for (int i = 0; i < crmyUsers.Count; i++)
            {
                string CrItem = crmyUsers[i].FName + "|" + crmyUsers[i].LName + "|" + crmyUsers[i].Email.Trim() + "|" + crmyUsers[i].Name + "|" + crmyUsers[i].UserID;
                CrItem = CrItem.Replace("\n", "").Replace("\t", "");
                string[] myItem = CrItem.Split("|".ToCharArray());

                dtMultiple.Rows.Add(myItem);
            }

            dgMultipleGroupList.ItemsSource = dtMultiple.DefaultView;

        }

        private void btnDeleteMailFromGroup_Click(object sender, RoutedEventArgs e)
        {

        }

        private void MenuItem_Click_New_Group(object sender, RoutedEventArgs e)
        {
            pop_Save_NewGroup.Content = "SAVE";

            popupNewGroupAdd.Visibility = System.Windows.Visibility.Visible;
            popupNewGroupAdd.IsOpen = true;
            popupNewGroupAdd.Effect = null;
            lblPopupStatusGroup.Content = "New Group";

            dtMultiple = new DataTable();
            dgMultipleGroupList.ItemsSource = dtMultiple.DefaultView;
            dgMultipleGroupList.Visibility = Visibility.Visible;

            cmbImportType_MultipleGroup.SelectedIndex = 0;
        }

        private void MenuItem_Click_Multiple_User(object sender, RoutedEventArgs e)
        {
            try
            {
                dtMultiple = new DataTable();
                dgMultipleUserList.ItemsSource = dtMultiple.DefaultView;
                btnSaveMultipleUsers.Content = "SAVE";

                // Fill Group Name            
                var grresult = Utility.ExecuteSP("UserGroup_SelectAll", "\"1234\"");
                grresult = grresult.Substring(14, grresult.Length - 16).TrimEnd();

                lstGroupForMultipleUser.ItemsSource = JsonConvert.DeserializeObject<DataTable>((grresult)).DefaultView;

                popupMultiplUserAdd.Visibility = System.Windows.Visibility.Visible;
                popupMultiplUserAdd.IsOpen = true;
                popupMultiplUserAdd.Effect = null;
                txtEMailIdMultiple.IsEnabled = true;
                lstGroupForMultipleUser.SelectedItems.Clear();
                cmbImportType_MultipleUser.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }


        private void btnSaveMultipleUsers_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string MyQuery = "", MailId = "", AccountId = "1234", result = "", FName = "", LName = "";

                foreach (DataRowView item in this.dgMultipleUserList.Items)
                {
                    if (cmbImportType_MultipleUser.SelectedIndex == 1)
                    {
                        MailId = item.Row[0].ToString().Replace("\n", "").Trim();
                        FName = "";
                        LName = "";

                    }
                    else if (cmbImportType_MultipleUser.SelectedIndex == 2)
                    {
                        FName = item.Row[0].ToString().Replace("\n", "").Trim();
                        LName = item.Row[1].ToString().Replace("\n", "").Trim();
                        MailId = item.Row[2].ToString().Replace("\n", "").Trim();
                    }
                    else
                    {
                        MailId = item.Row[0].ToString().Replace("\n", "").Trim();
                        FName = "";
                        LName = "";
                    }

                    result = "";
                    if (MailId != "" && MailId.IndexOf('@') > 1)
                    {
                        // Check Existing Mail Id
                        result = Utility.ExecuteSP("User_Exists", "\"'" + MailId + "'," + AccountId + "\"");
                        var obj = JsonConvert.DeserializeObject<UserAuthResponse>(result);
                        if (Convert.ToBoolean(obj.Table.FirstOrDefault().yRecCnt))
                        {
                        }
                        else
                        {
                            MyQuery = "'" + MailId + "','" + FName + "','" + LName + "',0,'Password123$', 0, 0, 0, 1234";
                            result = Utility.ExecuteSP("User_Insert", "\"" + MyQuery + "\"");

                            //Retrive UserID from e-Mail Id
                            result = Utility.ExecuteSP("User_SelectOne", "\"'" + MailId + "'," + AccountId + "\"");
                            result = result.Substring(14, result.Length - 16).TrimEnd();
                            var myobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(result);

                            List<UserMaster> myUsers = (myobj).Select(x => new UserMaster
                            {
                                UserID = (int)x["UserID"]
                            }).ToList();

                            string UserID = myUsers[0].UserID.ToString();

                            popupMultiplUserAdd.Visibility = System.Windows.Visibility.Collapsed;

                            // Linked Each Group Id To User Id & Account Id
                            string MySelectdGroupId = "";
                            foreach (DataRowView Myitem in this.lstGroupForMultipleUser.SelectedItems)
                            {
                                MySelectdGroupId = Myitem.Row["UserGroupID"].ToString();
                                MyQuery = MySelectdGroupId + ", " + UserID + ", 0, 0," + AccountId;
                                var GroupLinkresult = Utility.ExecuteSP("UserGroupLink_Insert", "\"" + MyQuery + "\"");
                            }
                        }
                    }
                }

                popupMultiplUserAdd.Visibility = System.Windows.Visibility.Hidden;
                popupMultiplUserAdd.IsOpen = false;

                GetUserDetails();

                popupNewUserAdd.Effect = null;
                lstGroupForMultipleUser.SelectedItems.Clear();
                MessageBox.Show("User has been Imported sucessfully !!!", "Message");
                dgMultipleUserList.ItemsSource = null;
            }
            catch (Exception ex)
            {
                popupNewUserAdd.Visibility = System.Windows.Visibility.Collapsed;
                MessageBox.Show("New User Exception ", ex.Message.ToString());
                popupNewUserAdd.Visibility = System.Windows.Visibility.Visible;
            }
        }


        private void cmbImportType_MultipleUser_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                // Initialization.
                if (dgMultipleUserList != null)
                    dgMultipleUserList.Visibility = Visibility.Hidden;

                if (cmbImportType_MultipleUser.SelectedIndex == 0)
                    return;
                OpenFileDialog browseDialog = new OpenFileDialog();
                DataTable datatable = new DataTable();

                // Settings.  
                browseDialog.Filter = "CSV Files|*.csv";

                // Verification  
                if (browseDialog.ShowDialog() == true)
                {
                    string delimiter = ",";
                    string tablename = cmbImportType_MultipleUser.SelectedItem.ToString();

                    if (cmbImportType_MultipleUser.SelectedIndex == 1)
                    {
                        dtMultiple = new DataTable();
                        dtMultiple.Columns.Add("EMail");

                        // Initialization.  
                        string filename = browseDialog.FileName;

                        StreamReader sr = new StreamReader(filename);

                        string allData = sr.ReadToEnd();
                        string[] rows = allData.Split("\r".ToCharArray());
                        foreach (string r in rows)
                        {
                            string[] items = r.Split(delimiter.ToCharArray());
                            if (items[0].ToString().IndexOf("@") > 1)
                                dtMultiple.Rows.Add(items);
                        }

                        this.dgMultipleUserList.ItemsSource = dtMultiple.DefaultView;
                        dgMultipleUserList.Columns[0].Visibility = Visibility.Hidden;
                        dgMultipleUserList.Visibility = Visibility.Visible;

                    }
                    else if (cmbImportType_MultipleUser.SelectedIndex == 2)
                    {
                        dtMultiple = new DataTable();
                        dtMultiple.Columns.Add("FName");
                        dtMultiple.Columns.Add("LName");
                        dtMultiple.Columns.Add("EMail");
                        dtMultiple.Columns.Add("Name");

                        // Initialization.  
                        string filename = browseDialog.FileName;

                        StreamReader sr = new StreamReader(filename);

                        string allData = sr.ReadToEnd();
                        string[] rows = allData.Split("\r".ToCharArray());
                        foreach (string r in rows)
                        {
                            string[] items = r.Split(delimiter.ToCharArray());

                            if (items.Length >= 3)
                                if (items[2].ToString().IndexOf("@") > 1)
                                {
                                    //items.Append(items[0].ToString() + " " + items[1].ToString());

                                    items = new List<string>(items) { items[0].ToString() + " " + items[1].ToString() }.ToArray();

                                    dtMultiple.Rows.Add(items);
                                }
                        }

                        this.dgMultipleUserList.ItemsSource = dtMultiple.DefaultView;
                        dgMultipleUserList.Columns[0].Visibility = Visibility.Visible;
                        dgMultipleUserList.Visibility = Visibility.Visible;

                    }
                    else
                    {
                        dtMultiple = new DataTable();
                        dgMultipleUserList.ItemsSource = dtMultiple.DefaultView;
                    }

                    popupMultiplUserAdd.Visibility = System.Windows.Visibility.Visible;
                    popupMultiplUserAdd.IsOpen = true;
                    popupMultiplUserAdd.Effect = null;

                    // Verification.  
                    if (dtMultiple.Rows.Count <= 0)
                    {
                        // Message.  
                        MessageBox.Show("Your file is either corrupt or does not contain any data. Make sure that you are using valid CSV file.", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                        // Info.  
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                // Info.  
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                Console.Write(ex);
            }
        }

        private void btnDeleteMultipleUsers_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;


        }

        private void btnAddMailtoGroup_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (dtMultiple.Rows.Count > 0)
                {
                }
                else
                {
                    if (dtMultiple.Columns.Count <= 0)
                        dtMultiple.Columns.Add("EMail");
                }
                dtMultiple.Rows.Add(txtAddMailtoGroup.Text.Trim());
                dgMultipleGroupList.ItemsSource = dtMultiple.DefaultView;

                txtAddMailtoGroup.Text = "";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void cmbImportType_MultipleGroup_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                // Initialization.  
                if (cmbImportType_MultipleGroup.SelectedIndex == 0)
                    return;
                OpenFileDialog browseDialog = new OpenFileDialog();
                DataTable datatable = new DataTable();

                // Settings.  
                browseDialog.Filter = "CSV Files|*.csv";

                // Verification  
                if (browseDialog.ShowDialog() == true)
                {
                    string delimiter = ",";
                    string tablename = cmbImportType_MultipleGroup.SelectedItem.ToString();

                    if (cmbImportType_MultipleGroup.SelectedIndex == 1)
                    {
                        if (pop_Save_NewGroup.Content.ToString() == "SAVE")
                        {
                            dtMultiple = new DataTable();
                            dtMultiple.Columns.Add("Email");
                        }
                        // Initialization.  
                        string filename = browseDialog.FileName;

                        StreamReader sr = new StreamReader(filename);

                        string allData = sr.ReadToEnd();
                        string[] rows = allData.Split("\r".ToCharArray());
                        foreach (string r in rows)
                        {
                            string[] items = r.Split(delimiter.ToCharArray());
                            if (items[0].ToString().IndexOf("@") > 1)
                            {
                                items[0] = items[0].Replace("\n", "").Replace("\t", "");

                                DataRow[] foundEmail = dtMultiple.Select("Email = '" + items[2].ToString().Trim() + "'");
                                if (foundEmail.Length <= 0)
                                {
                                    dtMultiple.Rows.Add(items);
                                }
                            }
                        }

                        this.dgMultipleGroupList.ItemsSource = dtMultiple.DefaultView;
                        dgMultipleGroupList.Columns[0].Visibility = Visibility.Hidden;

                    }
                    else if (cmbImportType_MultipleGroup.SelectedIndex == 2)
                    {
                        if (pop_Save_NewGroup.Content.ToString() == "SAVE")
                        {
                            dtMultiple = new DataTable();
                            dtMultiple.Columns.Add("FName");
                            dtMultiple.Columns.Add("LName");
                            dtMultiple.Columns.Add("Email");
                            dtMultiple.Columns.Add("Name");
                        }
                        // Initialization.  
                        string filename = browseDialog.FileName;

                        StreamReader sr = new StreamReader(filename);

                        string allData = sr.ReadToEnd();
                        string[] rows = allData.Split("\r".ToCharArray());
                        foreach (string r in rows)
                        {
                            string[] items = r.Split(delimiter.ToCharArray());

                            if (items.Length >= 3)
                                if (items[2].ToString().IndexOf("@") > 1)
                                {
                                    items[0] = items[0].Replace("\n", "").Replace("\t", "").Trim();
                                    items[2] = items[2].Replace("\n", "").Replace("\t", "");

                                    items = new List<string>(items) { items[0].ToString() + " " + items[1].ToString() }.ToArray();

                                    string Email = items[2].ToString().Trim().Replace(" ", "");
                                    bool contains = dtMultiple.AsEnumerable().Any(row => Email == row.Field<String>("Email"));
                                    if (contains == false)
                                    {
                                        dtMultiple.Rows.Add(items);
                                    }
                                }
                        }

                        this.dgMultipleGroupList.ItemsSource = dtMultiple.DefaultView;
                        dgMultipleGroupList.Columns[0].Visibility = Visibility.Visible;

                    }
                    else
                    {
                        dtMultiple = new DataTable();
                        dgMultipleGroupList.ItemsSource = dtMultiple.DefaultView;
                    }

                    popupNewGroupAdd.Visibility = System.Windows.Visibility.Visible;
                    popupNewGroupAdd.IsOpen = true;
                    popupNewGroupAdd.Effect = null;

                    // Verification.  
                    if (dtMultiple.Rows.Count <= 0)
                    {
                        // Message.  
                        MessageBox.Show("Your file is either corrupt or does not contain any data. Make sure that you are using valid CSV file.", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                        // Info.  
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void popNewUserCancel_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                popupNewGroupAdd.Visibility = Visibility.Hidden;
                popupNewUserAdd.Visibility = Visibility.Collapsed;
                popupNewUserAdd.IsOpen = false;
                popupNewUserAdd.Effect = null;
                dgUserList.Focus();

                txtEMailId.Text = "";
                txtFirstName.Text = "";
                txtLastName.Text = "";
                chkAdmin.IsChecked = false;
                GrList.SelectedItems.Clear();
                cmbLikeUserName.SelectedIndex = -1;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void pop_Close_NewUser_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                popupNewGroupAdd.Visibility = Visibility.Hidden;
                popupNewUserAdd.Visibility = Visibility.Collapsed;
                popupNewUserAdd.IsOpen = false;
                popupNewUserAdd.Effect = null;
                dgUserList.Focus();

                pop_Cancel_NewUser_Click(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void pop_Cancel_NewUser_Click(object sender, RoutedEventArgs e)
        {
            txtEMailId.Text = "";
            txtFirstName.Text = "";
            txtLastName.Text = "";
            chkAdmin.IsChecked = false;
            GrList.SelectedItems.Clear();
            cmbLikeUserName.SelectedIndex = -1;
        }

        private void pop_Save_NewUser_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // Linked Each Group Id To User Id & Account Id
                //  ListBoxData SelectedListBoxData = (ListBoxData)GrList.SelectedItem;
                popupNewUserAdd.Visibility = System.Windows.Visibility.Hidden;
                string MyQuery = "";

                string MailId = txtEMailId.Text;
                string AccountId = "1234";
                var result = "";
                // Check Existing Mail Id
                if (pop_Save_NewUser.Content.ToString() == "SAVE")
                {
                    result = Utility.ExecuteSP("User_Exists", "\"'" + MailId + "'," + AccountId + "\"");
                    var obj = JsonConvert.DeserializeObject<UserAuthResponse>(result);
                    if (Convert.ToBoolean(obj.Table.FirstOrDefault().yRecCnt))
                    {
                        /// Navigate to Main Window 
                        popupNewUserAdd.Visibility = System.Windows.Visibility.Collapsed;

                        // MessageBox.Show("User Already Exist", "Message");
                        popupNewUserAdd.Visibility = System.Windows.Visibility.Visible;
                        return;
                    }
                }

                int IsAdmin = 0;
                if (chkAdmin.IsChecked == true)
                    IsAdmin = 1;

                if (pop_Save_NewUser.Content.ToString() == "SAVE")
                {
                    MyQuery = "'" + txtEMailId.Text + "','" + txtFirstName.Text + "','" + txtLastName.Text + "'," + IsAdmin + ",'Password123$', 0, 0, 0, 1234";
                    result = Utility.ExecuteSP("User_Insert", "\"" + MyQuery + "\"");
                }
                else if (pop_Save_NewUser.Content.ToString() == "UPDATE")
                {
                    MyQuery = "'" + txtFirstName.Text + "','" + txtLastName.Text + "'," + IsAdmin + ",'" + txtEMailId.Text + "',1234";
                    result = Utility.ExecuteSP("User_UpdateEmailAddress", "\"" + MyQuery + "\"");


                }
                //Retrive UserID from e-Mail Id
                result = Utility.ExecuteSP("User_SelectOne", "\"'" + MailId + "'," + AccountId + "\"");
                result = result.Substring(14, result.Length - 16).TrimEnd();
                var myobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(result);

                List<UserMaster> myUsers = (myobj).Select(x => new UserMaster
                {
                    UserID = (int)x["UserID"]
                }).ToList();

                string UserID = myUsers[0].UserID.ToString();

                if (pop_Save_NewUser.Content.ToString() == "UPDATE")
                {
                    result = Utility.ExecuteSP("UserGroupLink_DeleteUserID", "\"'" + UserID + "'," + AccountId + "\"");
                    result = null;
                }
                popupNewUserAdd.Visibility = System.Windows.Visibility.Collapsed;

                // Linked Each Group Id To User Id & Account Id
                string MySelectdGroupId = "";
                foreach (DataRowView item in this.GrList.SelectedItems)
                {
                    MySelectdGroupId = item.Row["UserGroupID"].ToString();
                    MyQuery = MySelectdGroupId + ", " + UserID + ", 0, 0, 1234";
                    var GroupLinkresult = Utility.ExecuteSP("UserGroupLink_Insert", "\"" + MyQuery + "\"");
                }

                popupNewUserAdd.Visibility = System.Windows.Visibility.Hidden;
                popupNewUserAdd.IsOpen = false;
                cmbFilter_User.SelectedIndex = 0;   
                GetUserDetails();

                txtEMailId.Text = "";
                txtFirstName.Text = "";
                txtLastName.Text = "";
                chkAdmin.IsChecked = false;
                popupNewUserAdd.Visibility = Visibility.Collapsed;
                popupNewUserAdd.IsOpen = false;
                popupNewUserAdd.Effect = null;
                GrList.SelectedItems.Clear();
                cmbLikeUserName.SelectedIndex = -1;

                if (pop_Save_NewUser.Content.ToString() == "UPDATE")
                    MessageBox.Show("User has been updated sucessfully !", "Message");
                else
                    MessageBox.Show("User has been created sucessfully !", "Message");
            }
            catch (Exception ex)
            {
                popupNewUserAdd.Visibility = System.Windows.Visibility.Collapsed;
                MessageBox.Show("New User Exception ", ex.Message.ToString());
                popupNewUserAdd.Visibility = System.Windows.Visibility.Visible;
            }
        }



        private void pop_Add_MultipleUser_Click(object sender, RoutedEventArgs e)
        {
            if (dtMultiple.Rows.Count > 0)
            {
            }
            else
            {
                if (dtMultiple.Columns.Count <= 0)
                    dtMultiple.Columns.Add("EMail");
            }
            dtMultiple.Rows.Add(txtEMailIdMultiple.Text.Trim());
            this.dgMultipleUserList.ItemsSource = dtMultiple.DefaultView;

            txtEMailIdMultiple.Text = "";
        }

        private void pop_Close_MultiUser_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                popupMultiplUserAdd.Visibility = Visibility.Hidden;
                popupMultiplUserAdd.Visibility = Visibility.Collapsed;
                popupMultiplUserAdd.IsOpen = false;
                popupMultiplUserAdd.Effect = null;
                dgUserList.Focus();

                pop_Cancel_MultiUser_Click(sender, e);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void pop_Cancel_MultiUser_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                lstGroupForMultipleUser.SelectedItems.Clear();
                dgMultipleUserList.ItemsSource = null;
                dtMultiple.Rows.Clear();

                dtMultiple = new DataTable();
                dgMultipleUserList.ItemsSource = dtMultiple.DefaultView;
                btnSaveMultipleUsers.Content = "SAVE";

                txtEMailIdMultiple.IsEnabled = true;
                cmbImportType_MultipleUser.SelectedIndex = 0;
                txtEMailIdMultiple.Text = "";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        private void dgUserList_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            //string MyMailId = ((MiniMeStudio.Views.UsersPage.UserMaster)((System.Windows.FrameworkElement)sender).DataContext).Email.ToString();
            string MyMailId = ((MiniMeStudio.Views.UsersPage.UserMaster)((System.Windows.Controls.DataGrid)sender).CurrentCell.Item).Email;
            string AccountId = "1234";
            MyMailId = MyMailId.Trim().ToString();

            var EditUser_Result = Utility.ExecuteSP("User_SelectOne", "\"'" + MyMailId + "'," + AccountId + "\"");
            EditUser_Result = EditUser_Result.Substring(14, EditUser_Result.Length - 16).TrimEnd();
            var myobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(EditUser_Result);

            List<UserMaster> crmyUsers = (myobj).Select(x => new UserMaster
            {
                FName = (string)x["FirstName"]
                ,
                LName = (string)x["LastName"]
                ,
                Email = "   " + (string)x["EmailAddress"]
                ,
                IsAdmin = (string)x["IsAdmin"]
                ,
                UserID = (int)x["UserID"]

            }).ToList();


            txtEMailId.Text = MyMailId;
            txtFirstName.Text = crmyUsers[0].FName.ToString();
            txtLastName.Text = crmyUsers[0].LName.ToString();

            if (crmyUsers[0].IsAdmin.ToString() == "1")
                chkAdmin.IsChecked = true;
            else
                chkAdmin.IsChecked = false;

            // Fill Like e-Mail Address
            var result = Utility.ExecuteSP("User_SelectAll", "\"1234\"");
            result = result.Substring(14, result.Length - 16).TrimEnd();
            cmbLikeUserName.ItemsSource = JsonConvert.DeserializeObject<DataTable>((result)).DefaultView;
            cmbLikeUserName.SelectedIndex = 0;

            // Fill Group Name            
            var grresult = Utility.ExecuteSP("UserGroup_SelectAll", "\"1234\"");
            grresult = grresult.Substring(14, grresult.Length - 16).TrimEnd();
            GrList.ItemsSource = JsonConvert.DeserializeObject<DataTable>((grresult)).DefaultView;

            cmbLikeUserName.SelectedIndex = -1;

            //Retrive UserID from e-Mail Id
            AccountId = "1234";
            result = Utility.ExecuteSP("UserGroupLink_SelectOneUser", "\"'" + crmyUsers[0].UserID.ToString() + "'," + AccountId + "\"");
            result = result.Substring(14, result.Length - 16).TrimEnd();

            var grmyobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(result);

            List<GroupMaster> myUsers = (grmyobj).Select(x => new GroupMaster
            {
                UserGroupID = (string)x["UserGroupID"].ToString()

            }).ToList();

            string UserGroupID = "";
            for (int i = 0; i < myUsers.Count; i++)
            {
                UserGroupID = myUsers[i].UserGroupID.ToString();
                String strItem;
                foreach (DataRowView selecteditem in GrList.Items)
                {
                    strItem = selecteditem.Row["UserGroupID"].ToString();
                    if (UserGroupID == strItem)
                    {
                        GrList.SelectedItems.Add(selecteditem);
                    }
                }
            }


            // Show Popup Window
            popupNewUserAdd.Visibility = System.Windows.Visibility.Visible;
            popupNewUserAdd.IsOpen = true;
            popupNewUserAdd.Effect = null;

            pop_Save_NewUser.Content = "UPDATE";
            txtEMailId.IsEnabled = false;
            lblPopupStatus.Content = "Edit User";

        }

        private void pop_Close_NewGroup_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                pop_Cancel_NewGroup_Click(sender, e);
                popupNewGroupAdd.Visibility = Visibility.Hidden;
                popupNewGroupAdd.Visibility = Visibility.Collapsed;
                popupNewGroupAdd.IsOpen = false;
                popupNewGroupAdd.Effect = null;
                dgGroupList.Focus();

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void pop_Cancel_NewGroup_Click(object sender, RoutedEventArgs e)
        {
            txtGroupName.Text = "";
            txtDescription.Text = "";

            GetGroupDetails();

            pop_Save_NewGroup.Content = "SAVE";

            popupNewGroupAdd.Visibility = System.Windows.Visibility.Visible;
            popupNewGroupAdd.Visibility = Visibility.Collapsed;
            popupNewGroupAdd.IsOpen = true;
            popupNewGroupAdd.Effect = null;
            lblPopupStatusGroup.Content = "New Group";

            dtMultiple = new DataTable();
            dgMultipleGroupList.ItemsSource = dtMultiple.DefaultView;
            dgMultipleGroupList.Visibility = Visibility.Visible;

            cmbImportType_MultipleGroup.SelectedIndex = 0;
            GetGroupDetails();
        }

        private void pop_Save_NewGroup_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // Linked Each Group Id To User Id & Account Id
                //  ListBoxData SelectedListBoxData = (ListBoxData)GrList.SelectedItem;
                popupNewGroupAdd.Visibility = System.Windows.Visibility.Hidden;
                string MyQuery = "";

                string MailId = txtEMailId.Text;
                string AccountId = "1234";
                var result = "";

                if (pop_Save_NewGroup.Content.ToString() == "SAVE")
                {
                    MyQuery = "'" + txtGroupName.Text + "','" + txtDescription.Text + "',0,0," + AccountId;
                    result = Utility.ExecuteSP("UserGroup_Insert", "\"" + MyQuery + "\"");

                    var obj = JsonConvert.DeserializeObject<UserAuthResponse>(result);

                    if (Convert.ToInt16(obj.Table.FirstOrDefault().yRecCnt) > 0)
                    {
                        MyGroupId = Convert.ToInt16(obj.Table.FirstOrDefault().yRecCnt);
                    }
                }
                else if (pop_Save_NewGroup.Content.ToString() == "UPDATE")
                {
                    MyQuery = "'" + txtGroupName.Text + "','" + txtDescription.Text + "',0," + MyGroupId + "," + AccountId;
                    result = Utility.ExecuteSP("UserGroup_UpdateUserGroupID", "\"" + MyQuery + "\"");

                    MyQuery = MyGroupId + "," + AccountId;
                    result = Utility.ExecuteSP("UserGroupLink_DeleteUserGroupID", "\"" + MyQuery + "\"");
                }

                // Delete Group & User From ink Table If Exist

                // Link Group For Each User 
                MyQuery = "";
                MailId = "";
                AccountId = "1234";
                result = "";
                string FName = "", LName = "";

                foreach (DataRowView item in this.dgMultipleGroupList.Items)
                {
                    if (cmbImportType_MultipleGroup.SelectedIndex == 1)
                    {
                        MailId = item.Row[0].ToString().Replace("\n", "").Trim();
                        FName = "";
                        LName = "";

                    }
                    else if (cmbImportType_MultipleGroup.SelectedIndex == 2)
                    {
                        FName = item.Row[0].ToString().Replace("\n", "").Trim();
                        LName = item.Row[1].ToString().Replace("\n", "").Trim();
                        MailId = item.Row[2].ToString().Replace("\n", "").Trim();
                    }
                    else
                    {
                        if (pop_Save_NewGroup.Content.ToString() == "UPDATE")
                        {
                            FName = item.Row[0].ToString().Replace("\n", "").Trim();
                            LName = item.Row[1].ToString().Replace("\n", "").Trim();
                            MailId = item.Row[2].ToString().Replace("\n", "").Trim();
                        }
                        else
                        {
                            MailId = item.Row[0].ToString().Replace("\n", "").Trim();
                            FName = "";
                            LName = "";
                        }
                    }

                    result = "";
                    if (MailId != "" && MailId.IndexOf('@') > 1)
                    {
                        // Check Existing Mail Id
                        result = Utility.ExecuteSP("User_Exists", "\"'" + MailId + "'," + AccountId + "\"");
                        var obj = JsonConvert.DeserializeObject<UserAuthResponse>(result);
                        if (Convert.ToBoolean(obj.Table.FirstOrDefault().yRecCnt))
                        {

                        }
                        else
                        {
                            MyQuery = "'" + MailId + "','" + FName + "','" + LName + "',0,'Password123$', 0, 0, 0, 1234";
                            result = Utility.ExecuteSP("User_Insert", "\"" + MyQuery + "\"");
                        }

                        //Retrive UserID from e-Mail Id
                        result = Utility.ExecuteSP("User_SelectOne", "\"'" + MailId + "'," + AccountId + "\"");
                        result = result.Substring(14, result.Length - 16).TrimEnd();
                        var myobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(result);

                        List<UserMaster> myUsers = (myobj).Select(x => new UserMaster
                        {
                            UserID = (int)x["UserID"]
                        }).ToList();
                        string UserID = myUsers[0].UserID.ToString();

                        // Linked Each Group Id To User Id & Account Id
                        MyQuery = MyGroupId + ", " + UserID + ", 0, 0," + AccountId;
                        var GroupLinkresult = Utility.ExecuteSP("UserGroupLink_Insert", "\"" + MyQuery + "\"");
                    }
                }

                popupNewGroupAdd.Visibility = System.Windows.Visibility.Collapsed;
                popupNewGroupAdd.Visibility = System.Windows.Visibility.Hidden;
                popupNewGroupAdd.IsOpen = false;

                GetGroupDetails();

                txtGroupName.Text = "";
                txtDescription.Text = "";
                popupNewGroupAdd.Visibility = Visibility.Collapsed;
                popupNewGroupAdd.IsOpen = false;
                popupNewGroupAdd.Effect = null;

                if (pop_Save_NewGroup.Content.ToString() == "UPDATE")
                    MessageBox.Show("Group has been updated sucessfully !", "Message");
                else
                    MessageBox.Show("Group has been created sucessfully !", "Message");
            }
            catch (Exception ex)
            {
                popupNewGroupAdd.Visibility = System.Windows.Visibility.Collapsed;
                MessageBox.Show("New Group Exception ", ex.Message.ToString());
                popupNewGroupAdd.Visibility = System.Windows.Visibility.Visible;
            }
        }

        private void dgGroupList_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            //string MyMailId = ((MiniMeStudio.Views.UsersPage.UserMaster)((System.Windows.FrameworkElement)sender).DataContext).Email.ToString();
            string UserGroupID = ((MiniMeStudio.Views.UsersPage.GroupMaster)((System.Windows.Controls.DataGrid)sender).CurrentCell.Item).UserGroupID;
            UserGroupID = UserGroupID.Trim().ToString();

            string AccountId = "1234";

            var EditUser_Result = Utility.ExecuteSP("UserGroup_SelectOne", "\"'" + UserGroupID + "'," + AccountId + "\"");
            EditUser_Result = EditUser_Result.Substring(14, EditUser_Result.Length - 16).TrimEnd();
            var myobj = (Newtonsoft.Json.Linq.JArray)JsonConvert.DeserializeObject(EditUser_Result);

            List<GroupMaster> crmyUsers = (myobj).Select(x => new GroupMaster
            {
                UserGroupName = (string)x["UserGroupName"]
                ,
                UserGroupDescription = (string)x["UserGroupDescription"]
                ,
                UserGroupID = "   " + (string)x["UserGroupID"]

            }).ToList();


            txtDescription.Text = crmyUsers[0].UserGroupDescription.ToString();
            txtGroupName.Text = crmyUsers[0].UserGroupName.ToString();
            MyGroupId = int.Parse(crmyUsers[0].UserGroupID.ToString());

            // Show Popup Window
            popupNewGroupAdd.Visibility = System.Windows.Visibility.Visible;
            popupNewGroupAdd.IsOpen = true;
            popupNewGroupAdd.Effect = null;

            pop_Save_NewGroup.Content = "UPDATE";

            lblPopupStatusGroup.Content = "Edit Group";
            GetUserEmailByGroup(MyGroupId.ToString(), AccountId);
        }

        private void cmbFilter_User_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (cmbFilter_User == null)
                return;
            GetUserDetails();
        }

        private void txtSearch_User_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (txtSearch_User == null)
                return;
            if (dgUserList.Visibility == Visibility.Visible)
            {
                GetUserDetails();
                dgGroupList.Visibility = Visibility.Hidden;
            }
            if (dgGroupList.Visibility == Visibility.Visible)
                GetGroupDetails();
        }
    }
}